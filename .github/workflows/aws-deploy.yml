name: React CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  TREAT_WARNINGS_AS_ERRORS: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]

    outputs:
      build-success: ${{ steps.build-check.outputs.success }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Set environment variables
        run: |
          echo "REACT_APP_SITE_URL=${{ secrets.REACT_APP_SITE_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_APP_NAME=${{ secrets.REACT_APP_APP_NAME }}" >> $GITHUB_ENV
          echo "REACT_APP_VERSION=${{ secrets.REACT_APP_VERSION }}" >> $GITHUB_ENV
          echo "REACT_APP_API_GATEWAY_URL=${{ secrets.REACT_APP_API_GATEWAY_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_AWS_REGION=${{ secrets.REACT_APP_AWS_REGION }}" >> $GITHUB_ENV
          echo "REACT_APP_AWS_CLOUDFRONT_DOMAIN=${{ secrets.REACT_APP_AWS_CLOUDFRONT_DOMAIN }}" >> $GITHUB_ENV
          echo "REACT_APP_MAX_FILE_SIZE=${{ secrets.REACT_APP_MAX_FILE_SIZE }}" >> $GITHUB_ENV
          echo "REACT_APP_MAX_BATCH_SIZE=${{ secrets.REACT_APP_MAX_BATCH_SIZE }}" >> $GITHUB_ENV
          echo "REACT_APP_ALLOWED_IMAGE_TYPES=${{ secrets.REACT_APP_ALLOWED_IMAGE_TYPES }}" >> $GITHUB_ENV
          echo "REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: npm ci

      - name: Check for npm warnings
        run: |
          echo "Checking for potential issues..."
          npm audit --audit-level moderate || true
          echo "Checking outdated packages..."
          npm outdated || true

      - name: Build
        run: |
          echo "Building React application..."
          npm run build 2>&1 | tee build.log
          
          if grep -i "warning" build.log; then
            echo "‚ö†Ô∏è Warnings found during build:"
            grep -i "warning" build.log
            
            if [ "$TREAT_WARNINGS_AS_ERRORS" = "true" ]; then
              echo "‚ùå Build failed due to warnings - treating warnings as errors"
              exit 1
            else
              echo "‚ö†Ô∏è Warnings detected but continuing build (TREAT_WARNINGS_AS_ERRORS=false)"
            fi
          else
            echo "‚úÖ Build completed without warnings"
          fi
          
          if [ ! -d "./build" ]; then
            echo "‚ùå Build directory not found - build failed"
            exit 1
          fi
          
          echo "‚úÖ Build completed successfully"

      - name: Set build success
        id: build-check
        run: echo "success=true" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && needs.build-and-test.outputs.build-success == 'true'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          echo "üöÄ Starting deployment to S3..."
          echo "Bucket: caringalfrontend"
          echo "Path: frontend-build"
          echo "Region: ${{ secrets.AWS_REGION }}"
          
          find ./build -type f | head -10
          
          aws s3 sync ./build s3://caringalfrontend/frontend-build --delete --debug
          
          echo "‚úÖ S3 deployment completed"

      - name: Invalidate CloudFront
        run: |
          echo "üîÑ Starting CloudFront invalidation..."
          echo "Distribution ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
          
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --output text \
            --query 'Invalidation.Id')
          
          echo "Invalidation created with ID: $INVALIDATION_ID"
          echo "‚úÖ CloudFront invalidation initiated"

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.build-and-test.result }}" = "success" ] && [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "üéâ Deployment completed successfully!"
          elif [ "${{ needs.build-and-test.result }}" = "failure" ]; then
            echo "‚ùå Build failed - deployment skipped"
          elif [ "${{ needs.deploy.result }}" = "failure" ]; then
            echo "‚ùå Deployment failed"
          elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è Deployment skipped (not main branch or PR)"
          else
            echo "‚ö†Ô∏è Unknown deployment status"
          fi