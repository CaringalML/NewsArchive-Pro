name: NewsArchivePro CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  TREAT_WARNINGS_AS_ERRORS: true
  CI: true
  NODE_OPTIONS: "--max-old-space-size=4096"
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: newsarchivepro-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
      fail-fast: true

    outputs:
      build-success: ${{ steps.build-check.outputs.success }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Set environment variables
        run: |
          echo "REACT_APP_SITE_URL=${{ secrets.REACT_APP_SITE_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_APP_NAME=${{ secrets.REACT_APP_APP_NAME }}" >> $GITHUB_ENV
          echo "REACT_APP_VERSION=${{ secrets.REACT_APP_VERSION }}" >> $GITHUB_ENV
          echo "REACT_APP_API_GATEWAY_URL=${{ secrets.REACT_APP_API_GATEWAY_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_AWS_REGION=${{ secrets.REACT_APP_AWS_REGION }}" >> $GITHUB_ENV
          echo "REACT_APP_AWS_CLOUDFRONT_DOMAIN=${{ secrets.REACT_APP_AWS_CLOUDFRONT_DOMAIN }}" >> $GITHUB_ENV
          echo "REACT_APP_MAX_FILE_SIZE=${{ secrets.REACT_APP_MAX_FILE_SIZE }}" >> $GITHUB_ENV
          echo "REACT_APP_MAX_BATCH_SIZE=${{ secrets.REACT_APP_MAX_BATCH_SIZE }}" >> $GITHUB_ENV
          echo "REACT_APP_ALLOWED_IMAGE_TYPES=${{ secrets.REACT_APP_ALLOWED_IMAGE_TYPES }}" >> $GITHUB_ENV
          echo "REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> $GITHUB_ENV
          echo "GENERATE_SOURCEMAP=false" >> $GITHUB_ENV

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit --progress=false

      - name: Build
        run: |
          # Build with strict error checking but faster execution
          npm run build 2>&1 | tee build.log
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Build failed"
            exit 1
          fi
          
          # Quick warning check - treat warnings as errors
          if grep -i "warning\|warn" build.log; then
            echo "‚ùå Build failed due to warnings"
            exit 1
          fi
          
          # Quick build verification
          if [ ! -d "./build" ] || [ ! -f "./build/index.html" ]; then
            echo "‚ùå Build failed - missing output"
            exit 1
          fi
          
          echo "‚úÖ Build completed successfully"

      - name: Set build success
        id: build-check
        run: echo "success=true" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 1

  build-and-push-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        working-directory: ./backend/batch-ocr-app
        run: |
          # Fast Docker build and push with basic error checking
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:ocr-batch .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:ocr-batch
          echo "‚úÖ Image pushed successfully!"

      - name: Wait for ECR-Batch automation
        run: |
          echo "‚è≥ Waiting for ECR-Batch automation to complete..."
          echo "ü§ñ EventBridge will trigger Lambda function to update Batch job definitions"
          sleep 30
          
          # Check if Lambda function exists and get recent logs
          FUNCTION_NAME="newsarchivepro-ecr-batch-updater"
          if aws lambda get-function --function-name $FUNCTION_NAME --region ${{ secrets.AWS_REGION }} >/dev/null 2>&1; then
            echo "‚úÖ ECR-Batch automation Lambda function is deployed"
            
            # Get recent logs (last 2 minutes)
            echo "üìã Recent automation logs:"
            aws logs filter-log-events \
              --log-group-name "/aws/lambda/$FUNCTION_NAME" \
              --start-time $(date -d '2 minutes ago' +%s)000 \
              --region ${{ secrets.AWS_REGION }} \
              --query 'events[].message' \
              --output text || echo "No recent logs found (this is normal if automation hasn't run yet)"
          else
            echo "‚ö†Ô∏è ECR-Batch automation not deployed yet - run 'terraform apply' to enable automatic Batch updates"
          fi

      - name: Verify Batch job definition update
        run: |
          echo "üîç Verifying AWS Batch job definition was updated..."
          
          JOB_DEF_NAME="newsarchivepro-ocr-job-definition"
          
          # Get current Batch job definition image
          if aws batch describe-job-definitions --job-definition-name $JOB_DEF_NAME --status ACTIVE --region ${{ secrets.AWS_REGION }} >/dev/null 2>&1; then
            CURRENT_IMAGE=$(aws batch describe-job-definitions \
              --job-definition-name $JOB_DEF_NAME \
              --status ACTIVE \
              --region ${{ secrets.AWS_REGION }} \
              --query 'jobDefinitions[0].containerProperties.image' \
              --output text)
            
            CURRENT_REVISION=$(aws batch describe-job-definitions \
              --job-definition-name $JOB_DEF_NAME \
              --status ACTIVE \
              --region ${{ secrets.AWS_REGION }} \
              --query 'jobDefinitions[0].revision' \
              --output text)
            
            echo "üìã Current Batch job definition:"
            echo "   Revision: $CURRENT_REVISION"
            echo "   Image: $CURRENT_IMAGE"
            
            # Check if the image contains our latest tag or commit SHA
            if [[ "$CURRENT_IMAGE" == *"$IMAGE_TAG"* ]] || [[ "$CURRENT_IMAGE" == *"latest"* ]]; then
              echo "‚úÖ Batch job definition appears to be updated with latest image!"
            else
              echo "‚ö†Ô∏è Batch job definition may not be updated yet. This can take 1-2 minutes."
              echo "   Expected image to contain: $IMAGE_TAG or latest"
              echo "   Actual image: $CURRENT_IMAGE"
            fi
          else
            echo "‚ö†Ô∏è Batch job definition not found - may not be deployed yet"
            echo "   Run 'terraform apply' to deploy the complete infrastructure"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, build-and-push-backend]
    if: github.ref == 'refs/heads/main' && needs.build-and-test.outputs.build-success == 'true'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync ./build s3://caringalfrontend/frontend-build --delete
          echo "‚úÖ S3 deployment completed"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
          echo "‚úÖ CloudFront invalidation initiated"

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, build-and-push-backend, deploy]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.build-and-test.result }}" = "success" ] && [ "${{ needs.build-and-push-backend.result }}" = "success" ] && [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "üéâ Full deployment completed successfully!"
          elif [ "${{ needs.build-and-test.result }}" = "failure" ]; then
            echo "‚ùå Frontend build failed - deployment skipped"
            exit 1
          elif [ "${{ needs.build-and-push-backend.result }}" = "failure" ]; then
            echo "‚ùå Backend container build failed"
            exit 1
          elif [ "${{ needs.deploy.result }}" = "failure" ]; then
            echo "‚ùå Frontend deployment failed"
            exit 1
          elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è Deployment skipped (not main branch or PR)"
          else
            echo "‚ö†Ô∏è Unknown deployment status"
          fi